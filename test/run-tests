#!/usr/bin/env bash

set -eu -o pipefail

spago build
cabal build
tmp_dir=$(mktemp -d)

trap 'printf "rm -rf %s\n" "$tmp_dir"; rm -rf "$tmp_dir"' EXIT

data_dir=$(realpath "$(dirname "${0}")/data")

[[ -d ${data_dir} ]]

doTest() {
    local input_base output_base output func
    input=$1
    func=$2
    input_base=$(basename "${input}")
    output_base="out${input_base#in}"
    output="${tmp_dir}/${output_base}"
    printf '\nTesting %s with %s\n' "${func}" "${input_base}"

    case ${func} in
        haskell-*)
            time cabal run -v0 -- \
                 climb \
                 "--${func#haskell-}" \
                 <"${input}" \
                 >"${output}"
            ;;

        *)
            node_args=("--${func}")
            time spago \
                 run \
                 --node-args "${node_args[@]}" \
                 <"${input}" \
                 >"${output}"
            ;;
    esac

    diff --ignore-trailing-space \
         --unified \
         "${output}" \
         "${data_dir}/${output_base}"
}

haskell_funcs=$(cabal run -v0 -- climb --list | sed -E 's|(.+)|haskell-\1|')

for func in tc mr foldl $haskell_funcs
do
    for input in "${data_dir}"/input-*.txt
    do
        doTest "${input}" "${func}"
    done
done
